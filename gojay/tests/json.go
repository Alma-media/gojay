// Code generated by GoJay. DO NOT EDIT.

package tests

import "github.com/francoispqt/gojay"

// UnmarshalJSONArray implements gojay's UnmarshalerJSONArray
func (v *StrSlice) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var str string
	if err := dec.String(&str); err != nil {
		return err
	}
	*v = append(*v, str)
	return nil
}

// MarshalJSONArray implements gojay's MarshalerJSONArray
func (v *StrSlice) MarshalJSONArray(enc *gojay.Encoder) {
	for _, s := range *v {
		enc.String(s)
	}
}

// IsNil implements gojay's MarshalerJSONArray
func (v *StrSlice) IsNil() bool {
	return *v == nil || len(*v) == 0
}

// UnmarshalJSONArray implements gojay's UnmarshalerJSONArray
func (v *IntSlice) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var i int
	if err := dec.Int(&i); err != nil {
		return err
	}
	*v = append(*v, i)
	return nil
}

// MarshalJSONArray implements gojay's MarshalerJSONArray
func (v *IntSlice) MarshalJSONArray(enc *gojay.Encoder) {
	for _, s := range *v {
		enc.Int(s)
	}
}

// IsNil implements gojay's MarshalerJSONArray
func (v *IntSlice) IsNil() bool {
	return *v == nil || len(*v) == 0
}

// UnmarshalJSONArray implements gojay's UnmarshalerJSONArray
func (v *BoolSlice) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var b bool
	if err := dec.Bool(&b); err != nil {
		return err
	}
	*v = append(*v, b)
	return nil
}

// MarshalJSONArray implements gojay's MarshalerJSONArray
func (v *BoolSlice) MarshalJSONArray(enc *gojay.Encoder) {
	for _, s := range *v {
		enc.Bool(s)
	}
}

// IsNil implements gojay's MarshalerJSONArray
func (v *BoolSlice) IsNil() bool {
	return *v == nil || len(*v) == 0
}

// UnmarshalJSONArray implements gojay's UnmarshalerJSONArray
func (v *StructSlice) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var s = &A{}
	if err := dec.Object(s); err != nil {
		return err
	}
	*v = append(*v, s)
	return nil
}

// MarshalJSONArray implements gojay's MarshalerJSONArray
func (v *StructSlice) MarshalJSONArray(enc *gojay.Encoder) {
	for _, s := range *v {
		enc.Object(s)
	}
}

// IsNil implements gojay's MarshalerJSONArray
func (v *StructSlice) IsNil() bool {
	return *v == nil || len(*v) == 0
}

// UnmarshalJSONArray implements gojay's UnmarshalerJSONArray
func (v *SliceSlice) UnmarshalJSONArray(dec *gojay.Decoder) error {
	var s = make(StrSlice, 0)
	if err := dec.Array(&s); err != nil {
		return err
	}
	*v = append(*v, &s)
	return nil
}

// MarshalJSONArray implements gojay's MarshalerJSONArray
func (v *SliceSlice) MarshalJSONArray(enc *gojay.Encoder) {
	for _, s := range *v {
		enc.Array(s)
	}
}

// IsNil implements gojay's MarshalerJSONArray
func (v *SliceSlice) IsNil() bool {
	return *v == nil || len(*v) == 0
}

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *A) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "string":
		return dec.String(&v.Str)
	case "bool":
		return dec.Bool(&v.Bool)
	case "int":
		return dec.Int(&v.Int)
	case "int64":
		return dec.Int64(&v.Int64)
	case "int32":
		return dec.Int32(&v.Int32)
	case "int16":
		return dec.Int16(&v.Int16)
	case "int8":
		return dec.Int8(&v.Int8)
	case "uint64":
		return dec.Uint64(&v.Uint64)
	case "uint32":
		return dec.Uint32(&v.Uint32)
	case "uint16":
		return dec.Uint16(&v.Uint16)
	case "uint8":
		return dec.Uint8(&v.Uint8)
	case "bval":
		if v.Bval == nil {
			v.Bval = &B{}
		}
		return dec.Object(v.Bval)
	case "arrval":
		if v.Arrval == nil {
			arr := make(StrSlice, 0)
			v.Arrval = &arr
		}
		return dec.Array(v.Arrval)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *A) NKeys() int { return 13 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *A) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("string", v.Str)
	enc.BoolKey("bool", v.Bool)
	enc.IntKey("int", v.Int)
	enc.Int64Key("int64", v.Int64)
	enc.Int32Key("int32", v.Int32)
	enc.Int16Key("int16", v.Int16)
	enc.Int8Key("int8", v.Int8)
	enc.Uint64Key("uint64", v.Uint64)
	enc.Uint32Key("uint32", v.Uint32)
	enc.Uint16Key("uint16", v.Uint16)
	enc.Uint8Key("uint8", v.Uint8)
	enc.ObjectKey("bval", v.Bval)
	enc.ArrayKey("arrval", v.Arrval)
}

// IsNil returns wether the structure is nil value or not
func (v *A) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v *B) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	switch k {
	case "str":
		return dec.String(&v.Str)
	case "bool":
		return dec.Bool(&v.Bool)
	case "int":
		return dec.Int(&v.Int)
	case "int64":
		return dec.Int64(&v.Int64)
	case "int32":
		return dec.Int32(&v.Int32)
	case "int16":
		return dec.Int16(&v.Int16)
	case "int8":
		return dec.Int8(&v.Int8)
	case "uint64":
		return dec.Uint64(&v.Uint64)
	case "uint32":
		return dec.Uint32(&v.Uint32)
	case "uint16":
		return dec.Uint16(&v.Uint16)
	case "uint8":
		return dec.Uint8(&v.Uint8)
	case "strPtr":
		return dec.String(v.StrPtr)
	case "boolPtr":
		return dec.Bool(v.BoolPtr)
	case "intPtr":
		return dec.Int(v.IntPtr)
	case "int64Ptr":
		return dec.Int64(v.Int64Ptr)
	case "int32Ptr":
		return dec.Int32(v.Int32Ptr)
	case "int16Ptr":
		return dec.Int16(v.Int16Ptr)
	case "int8Ptr":
		return dec.Int8(v.Int8Ptr)
	case "uint64Ptr":
		return dec.Uint64(v.Uint64Ptr)
	case "uint32Ptr":
		return dec.Uint32(v.Uint32Ptr)
	case "uint16Ptr":
		return dec.Uint16(v.Uint16Ptr)
	case "uint8PTr":
		return dec.Uint8(v.Uint8PTr)
	}
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v *B) NKeys() int { return 22 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v *B) MarshalJSONObject(enc *gojay.Encoder) {
	enc.StringKey("str", v.Str)
	enc.BoolKey("bool", v.Bool)
	enc.IntKey("int", v.Int)
	enc.Int64Key("int64", v.Int64)
	enc.Int32Key("int32", v.Int32)
	enc.Int16Key("int16", v.Int16)
	enc.Int8Key("int8", v.Int8)
	enc.Uint64Key("uint64", v.Uint64)
	enc.Uint32Key("uint32", v.Uint32)
	enc.Uint16Key("uint16", v.Uint16)
	enc.Uint8Key("uint8", v.Uint8)
	enc.StringKey("strPtr", *v.StrPtr)
	enc.BoolKey("boolPtr", *v.BoolPtr)
	enc.IntKey("intPtr", *v.IntPtr)
	enc.Int64Key("int64Ptr", *v.Int64Ptr)
	enc.Int32Key("int32Ptr", *v.Int32Ptr)
	enc.Int16Key("int16Ptr", *v.Int16Ptr)
	enc.Int8Key("int8Ptr", *v.Int8Ptr)
	enc.Uint64Key("uint64Ptr", *v.Uint64Ptr)
	enc.Uint32Key("uint32Ptr", *v.Uint32Ptr)
	enc.Uint16Key("uint16Ptr", *v.Uint16Ptr)
	enc.Uint8Key("uint8PTr", *v.Uint8PTr)
}

// IsNil returns wether the structure is nil value or not
func (v *B) IsNil() bool { return v == nil }

// UnmarshalJSONObject implements gojay's UnmarshalerJSONObject
func (v MapStringInt) UnmarshalJSONObject(dec *gojay.Decoder, k string) error {
	var i int
	if err := dec.Int(&i); err != nil {
		return err
	}
	v[k] = i
	return nil
}

// NKeys returns the number of keys to unmarshal
func (v MapStringInt) NKeys() int { return 0 }

// MarshalJSONObject implements gojay's MarshalerJSONObject
func (v MapStringInt) MarshalJSONObject(enc *gojay.Encoder) {
	for k, s := range v {
		enc.IntKey(k, s)
	}
}

// IsNil returns wether the structure is nil value or not
func (v MapStringInt) IsNil() bool { return v == nil || len(v) == 0 }
